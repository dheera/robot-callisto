#!/usr/bin/env python3

import math
import rospy
from sensor_msgs.msg import Imu
from std_msgs.msg import Int16MultiArray

last_imu = (0.0, 0.0, 0.0)

def on_imu_data(msg):
    global last_imu
    mag = (msg.orientation.x**2 + msg.orientation.y**2 + msg.orientation.z**2 + msg.orientation.w**2)**0.5
    a = msg.orientation.x / mag
    b = msg.orientation.y / mag
    c = msg.orientation.z / mag
    d = msg.orientation.w / mag
    yaw = math.atan2(2*a*b+2*c*d, 1-2*b*b-2*c*c)
    pitch = math.asin(2*(a*c-b*d))
    roll = math.atan2(2*a*d+2*b*c, 1-2*c*c-2*d*d)+math.pi
    if roll > math.pi:
      roll -= 2*math.pi
    last_imu = yaw, pitch, roll

if __name__ == "__main__":
    rospy.init_node("balance_node")

    TOPIC_MOTOR_COMMAND = "/motor/command"
    TOPIC_IMU_DATA = "/imu/data"

    pub_motor_command = rospy.Publisher(TOPIC_MOTOR_COMMAND, Int16MultiArray, queue_size = 1)
    sub_imu_data = rospy.Subscriber(TOPIC_IMU_DATA, Imu, on_imu_data)

    rate = rospy.Rate(30)

    kp = 200

    msg_command = Int16MultiArray()

    while not rospy.is_shutdown():
        rate.sleep()

        pitch = last_imu[1]
        command = -int(kp * pitch)

        msg_command.data = [command, command]
        pub_motor_command.publish(msg_command)
