#!/usr/bin/env python3

import math
import numpy as np
import rospy
import time
from sensor_msgs.msg import Imu
from std_msgs.msg import Int16MultiArray, Int32MultiArray

last_imu = (0.0, 0.0, 0.0)

def on_imu_data(msg):
    global last_imu
    mag = (msg.orientation.x**2 + msg.orientation.y**2 + msg.orientation.z**2 + msg.orientation.w**2)**0.5
    a = msg.orientation.x / mag
    b = msg.orientation.y / mag
    c = msg.orientation.z / mag
    d = msg.orientation.w / mag
    yaw = math.atan2(2*a*b+2*c*d, 1-2*b*b-2*c*c)
    pitch = math.asin(2*(a*c-b*d))
    roll = math.atan2(2*a*d+2*b*c, 1-2*c*c-2*d*d)+math.pi
    if roll > math.pi:
      roll -= 2*math.pi
    last_imu = yaw, pitch, roll

motor_count_history = np.zeros((10, 3), dtype=np.int64) #(ch1, ch2, time)
motor_count_index = 0
velocity = (0.0, 0.0)

def on_motor_count(msg):
    global velocity, motor_count_index, motor_count_history

    if len(msg.data) != 2:
        return

    index_new = (motor_count_index+1) % 10
    motor_count_history[motor_count_index % 10, :] = [msg.data[0], msg.data[1], time.time()*1000]

    diff = motor_count_history[motor_count_index, :] - motor_count_history[index_new, :]

    velocity = M_PER_TICK * diff[0] / diff[2] * 1000.0 , M_PER_TICK * diff[1] / diff[2] * 1000.0

    motor_count_index = index_new

if __name__ == "__main__":
    rospy.init_node("balance_node")

    TOPIC_MOTOR_COMMAND = "/motor/command"
    TOPIC_MOTOR_COUNT = "/motor/brushless_count"
    TOPIC_IMU_DATA = "/imu/data"
    M_PER_TICK = 10.0 * 25.4 / 1000.0 * 3.14159265358979 / 90.0
    print(M_PER_TICK)

    pub_motor_command = rospy.Publisher(TOPIC_MOTOR_COMMAND, Int16MultiArray, queue_size = 1)
    sub_motor_count = rospy.Subscriber(TOPIC_MOTOR_COUNT, Int32MultiArray, on_motor_count)
    sub_imu_data = rospy.Subscriber(TOPIC_IMU_DATA, Imu, on_imu_data)

    rate = rospy.Rate(30)

    kp = 200

    msg_command = Int16MultiArray()

    while not rospy.is_shutdown():
        rate.sleep()

        pitch = last_imu[1]
        command = -int(kp * pitch)

        print("pitch={} velocity={}".format(pitch, (velocity[0] + velocity[1]) / 2))

        msg_command.data = [command, command]
        pub_motor_command.publish(msg_command)
